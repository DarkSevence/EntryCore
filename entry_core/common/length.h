#pragma once

#include "global_config.h"

enum EMisc
{
	MAX_HOST_LENGTH = 15,
	IP_ADDRESS_LENGTH = 15,
	LOGIN_MAX_LEN = 30,
	PASSWD_MAX_LEN = 16,
	PLAYER_PER_ACCOUNT = 5,
	ACCOUNT_STATUS_MAX_LEN = 8,
	CHARACTER_NAME_MAX_LEN = 32,
	PLAYER_NAME_MAX_LEN = 15,
	SHOP_SIGN_MAX_LEN = 32,
	INVENTORY_PAGE_COLUMN = 5,
	INVENTORY_PAGE_ROW = 9,
	INVENTORY_PAGE_SIZE = INVENTORY_PAGE_COLUMN * INVENTORY_PAGE_ROW,
	INVENTORY_PAGE_COUNT = 4,
	INVENTORY_MAX_NUM = INVENTORY_PAGE_SIZE * INVENTORY_PAGE_COUNT,
	ABILITY_MAX_NUM = 50,
	EMPIRE_MAX_NUM = 4,
	BANWORD_MAX_LEN = 24,
	SOCIAL_ID_MAX_LEN = 18,
	GUILD_NAME_MAX_LEN = 12,
	SHOP_HOST_ITEM_MAX_NUM = 40,
	SHOP_GUEST_ITEM_MAX_NUM = 18,
	SHOP_PRICELIST_MAX_NUM = 40,
	CHAT_MAX_LEN = 512,
	QUICKSLOT_MAX_NUM = 36,
	JOURNAL_MAX_NUM = 2,
	QUERY_MAX_LEN = 8192,
	FILE_MAX_LEN = 128,
	PLAYER_EXP_TABLE_MAX = 120,
	PLAYER_MAX_LEVEL_CONST = 120,
	GUILD_MAX_LEVEL = 20,
	MOB_MAX_LEVEL = 100,
	ATTRIBUTE_MAX_VALUE = 20,
	CHARACTER_PATH_MAX_NUM = 64,
	SKILL_MAX_NUM = 255,
	SKILLBOOK_DELAY_MIN = 64800,
	SKILLBOOK_DELAY_MAX = 108000, 
	SKILL_MAX_LEVEL = 40,
	APPLY_NAME_MAX_LEN = 32,
	EVENT_FLAG_NAME_MAX_LEN = 32,
	MOB_SKILL_MAX_NUM = 5,
	POINT_MAX_NUM = 255,
	DRAGON_SOUL_BOX_SIZE = 32,
	DRAGON_SOUL_BOX_COLUMN_NUM = 8,
	DRAGON_SOUL_REFINE_GRID_SIZE = 15,
	MAX_AMOUNT_OF_MALL_BONUS = 20,
	WEAR_MAX_NUM = 32,
	GOLD_MAX = 2000000000,
	SHOP_TAB_NAME_MAX = 32,
	SHOP_TAB_COUNT_MAX = 3,
	BELT_INVENTORY_SLOT_WIDTH = 4,
	BELT_INVENTORY_SLOT_HEIGHT= 4,
	BELT_INVENTORY_SLOT_COUNT = BELT_INVENTORY_SLOT_WIDTH * BELT_INVENTORY_SLOT_HEIGHT,
	SKILL_REMOVE_AFFECT_MAX_LEVEL_DIFF = 15,
};

enum EWearPositions
{
	WEAR_BODY = 0,
	WEAR_HEAD = 1,
	WEAR_FOOTS = 2,
	WEAR_WRIST = 3,
	WEAR_WEAPON = 4,
	WEAR_NECK = 5,
	WEAR_EAR = 6,
	WEAR_UNIQUE1 = 7, 
	WEAR_UNIQUE2 = 8,
	WEAR_ARROW = 9,
	WEAR_SHIELD = 10,
	WEAR_ABILITY1 = 11,
	WEAR_ABILITY2 = 12,
	WEAR_ABILITY3 = 13,
	WEAR_ABILITY4 = 14,
	WEAR_ABILITY5 = 15,
	WEAR_ABILITY6 = 16,
	WEAR_ABILITY7 = 17,
	WEAR_ABILITY8 = 18,
	WEAR_COSTUME_BODY = 19,
	WEAR_COSTUME_HAIR = 20,
	WEAR_COSTUME_MOUNT = 21,
	WEAR_RING1 = 22,
	WEAR_RING2 = 23,
	WEAR_BELT = 24,
	WEAR_MAX = 25,
};

enum EDragonSoulDeckType
{
	DRAGON_SOUL_DECK_0 = 0,
	DRAGON_SOUL_DECK_1 = 1,
	DRAGON_SOUL_DECK_MAX_NUM = 2,
	DRAGON_SOUL_DECK_RESERVED_MAX_NUM = 3,
};

enum ESex
{
	SEX_MALE = 0,
	SEX_FEMALE = 1
};

enum EDirection
{
	DIR_NORTH = 0,
	DIR_NORTHEAST = 1,
	DIR_EAST = 2,
	DIR_SOUTHEAST = 3,
	DIR_SOUTH = 4,
	DIR_SOUTHWEST = 5,
	DIR_WEST = 6,
	DIR_NORTHWEST = 7,
	DIR_MAX_NUM = 8,
};

enum EAbilityDifficulty
{
	DIFFICULTY_EASY = 0,
	DIFFICULTY_NORMAL = 1,
	DIFFICULTY_HARD = 2,
	DIFFICULTY_VERY_HARD = 3,
	DIFFICULTY_NUM_TYPES = 4,
};

enum EAbilityCategory
{
	CATEGORY_PHYSICAL = 0,
	CATEGORY_MENTAL = 1,
	CATEGORY_ATTRIBUTE = 2,
	CATEGORY_NUM_TYPES = 3,
};

enum EJobs
{
	JOB_WARRIOR = 0,
	JOB_ASSASSIN = 1,
	JOB_SURA = 2,
	JOB_SHAMAN = 3,
	JOB_MAX_NUM = 4,
};

enum ESkillGroups
{
	SKILL_GROUP_MAX_NUM = 2,
};

enum ERaceFlags
{
	RACE_FLAG_ANIMAL = (1 << 0),
	RACE_FLAG_UNDEAD = (1 << 1),
	RACE_FLAG_DEVIL = (1 << 2),
	RACE_FLAG_HUMAN = (1 << 3),
	RACE_FLAG_ORC = (1 << 4),
	RACE_FLAG_MILGYO = (1 << 5),
	RACE_FLAG_INSECT = (1 << 6),
	RACE_FLAG_FIRE = (1 << 7),
	RACE_FLAG_ICE = (1 << 8),
	RACE_FLAG_DESERT = (1 << 9),
	RACE_FLAG_TREE = (1 << 10),
	RACE_FLAG_ATT_ELEC = (1 << 11),
	RACE_FLAG_ATT_FIRE = (1 << 12),
	RACE_FLAG_ATT_ICE = (1 << 13),
	RACE_FLAG_ATT_WIND = (1 << 14),
	RACE_FLAG_ATT_EARTH = (1 << 15),
	RACE_FLAG_ATT_DARK = (1 << 16),
};

enum ELoads
{
	LOAD_NONE = 0,
	LOAD_LIGHT = 1,
	LOAD_NORMAL = 2,
	LOAD_HEAVY = 3,
	LOAD_MASSIVE = 4,
};

enum QuickSlotTypes
{
	QUICKSLOT_TYPE_NONE = 0,
	QUICKSLOT_TYPE_ITEM = 1,
	QUICKSLOT_TYPE_SKILL = 2,
	QUICKSLOT_TYPE_COMMAND = 3,
	QUICKSLOT_TYPE_MAX_NUM = 4,
};

enum EParts
{
	PART_MAIN = 0,
	PART_WEAPON = 1,
	PART_HEAD = 2,
	PART_HAIR = 3,
	PART_MAX_NUM = 4,
	PART_WEAPON_SUB	= 5,
};

enum EChatType
{
	CHAT_TYPE_TALKING = 0,
	CHAT_TYPE_INFO = 1,
	CHAT_TYPE_NOTICE = 2,
	CHAT_TYPE_PARTY = 3,
	CHAT_TYPE_GUILD = 4,
	CHAT_TYPE_COMMAND = 5,
	CHAT_TYPE_SHOUT = 6,
	CHAT_TYPE_WHISPER = 7,
	CHAT_TYPE_BIG_NOTICE = 8,
};

enum EWhisperType
{
	WHISPER_TYPE_NORMAL = 0,
	WHISPER_TYPE_NOT_EXIST = 1,
	WHISPER_TYPE_TARGET_BLOCKED = 2,
	WHISPER_TYPE_SENDER_BLOCKED = 3,
	WHISPER_TYPE_ERROR = 4,
	WHISPER_TYPE_GM = 5,
	WHISPER_TYPE_SYSTEM = 6
};

enum ECharacterPosition
{
	POSITION_GENERAL = 0,
	POSITION_BATTLE = 1,
	POSITION_DYING = 2,
	POSITION_SITTING_CHAIR = 3,
	POSITION_SITTING_GROUND = 4,
	POSITION_INTRO = 5,
	POSITION_MAX_NUM = 6
};

enum EGMLevels
{
	GM_PLAYER = 0,
	GM_LOW_WIZARD = 1,
	GM_WIZARD = 2,
	GM_HIGH_WIZARD = 3,
	GM_GOD = 4,
	GM_IMPLEMENTOR = 5,
};

enum EMobRank
{
	MOB_RANK_PAWN = 0,
	MOB_RANK_S_PAWN = 1,
	MOB_RANK_KNIGHT = 2,
	MOB_RANK_S_KNIGHT = 3,
	MOB_RANK_BOSS = 4,
	MOB_RANK_KING = 5,
	MOB_RANK_MAX_NUM = 6,
};

enum ECharType
{
	CHAR_TYPE_MONSTER = 0,
	CHAR_TYPE_NPC = 1,
	CHAR_TYPE_STONE = 2,
	CHAR_TYPE_WARP = 3,
	CHAR_TYPE_DOOR = 4,
	CHAR_TYPE_BUILDING = 5,
	CHAR_TYPE_PC = 6,
	CHAR_TYPE_POLYMORPH_PC = 7,
	CHAR_TYPE_HORSE = 8,
	CHAR_TYPE_GOTO = 9,
};

enum EBattleType
{
	BATTLE_TYPE_MELEE = 0,
	BATTLE_TYPE_RANGE = 1,
	BATTLE_TYPE_MAGIC = 2,
	BATTLE_TYPE_SPECIAL = 3,
	BATTLE_TYPE_POWER = 4,
	BATTLE_TYPE_TANKER = 5,
	BATTLE_TYPE_SUPER_POWER = 6,
	BATTLE_TYPE_SUPER_TANKER = 7,
	BATTLE_TYPE_MAX_NUM = 8,
};

enum EApplyTypes
{
	APPLY_NONE = 0,
	APPLY_MAX_HP = 1,
	APPLY_MAX_SP = 2,
	APPLY_CON = 3,
	APPLY_INT = 4,
	APPLY_STR = 5,
	APPLY_DEX = 6,
	APPLY_ATT_SPEED = 7,
	APPLY_MOV_SPEED = 8,
	APPLY_CAST_SPEED = 9,
	APPLY_HP_REGEN = 10,
	APPLY_SP_REGEN = 11,
	APPLY_POISON_PCT = 12,
	APPLY_STUN_PCT = 13,
	APPLY_SLOW_PCT = 14,
	APPLY_CRITICAL_PCT = 15,
	APPLY_PENETRATE_PCT = 16,
	APPLY_ATTBONUS_HUMAN = 17,
	APPLY_ATTBONUS_ANIMAL = 18,
	APPLY_ATTBONUS_ORC = 19,
	APPLY_ATTBONUS_MILGYO = 20,
	APPLY_ATTBONUS_UNDEAD = 21,
	APPLY_ATTBONUS_DEVIL = 22,
	APPLY_STEAL_HP = 23,
	APPLY_STEAL_SP = 24,
	APPLY_MANA_BURN_PCT = 25,
	APPLY_DAMAGE_SP_RECOVER = 26,
	APPLY_BLOCK = 27,
	APPLY_DODGE = 28,
	APPLY_RESIST_SWORD = 29,
	APPLY_RESIST_TWOHAND = 30,
	APPLY_RESIST_DAGGER = 31,
	APPLY_RESIST_BELL = 32,
	APPLY_RESIST_FAN = 33,
	APPLY_RESIST_BOW = 34,
	APPLY_RESIST_FIRE = 35,
	APPLY_RESIST_ELEC = 36,
	APPLY_RESIST_MAGIC = 37,
	APPLY_RESIST_WIND = 38,
	APPLY_REFLECT_MELEE = 39,
	APPLY_REFLECT_CURSE = 40,
	APPLY_POISON_REDUCE = 41,
	APPLY_KILL_SP_RECOVER = 42,
	APPLY_EXP_DOUBLE_BONUS = 43,
	APPLY_GOLD_DOUBLE_BONUS = 44,
	APPLY_ITEM_DROP_BONUS = 45,
	APPLY_POTION_BONUS = 46,
	APPLY_KILL_HP_RECOVER = 47,
	APPLY_IMMUNE_STUN = 48,
	APPLY_IMMUNE_SLOW = 49,
	APPLY_IMMUNE_FALL = 50,
	APPLY_SKILL = 51,
	APPLY_BOW_DISTANCE = 52,
	APPLY_ATT_GRADE_BONUS = 53,
	APPLY_DEF_GRADE_BONUS = 54,
	APPLY_MAGIC_ATT_GRADE = 55,
	APPLY_MAGIC_DEF_GRADE = 56,
	APPLY_CURSE_PCT = 57,
	APPLY_MAX_STAMINA = 58,
	APPLY_ATTBONUS_WARRIOR = 59,
	APPLY_ATTBONUS_ASSASSIN = 60,
	APPLY_ATTBONUS_SURA = 61,
	APPLY_ATTBONUS_SHAMAN = 62,
	APPLY_ATTBONUS_MONSTER = 63,
	APPLY_MALL_ATTBONUS = 64,
	APPLY_MALL_DEFBONUS = 65,
	APPLY_MALL_EXPBONUS = 66,
	APPLY_MALL_ITEMBONUS = 67,
	APPLY_MALL_GOLDBONUS = 68,
	APPLY_MAX_HP_PCT = 69,
	APPLY_MAX_SP_PCT = 70,
	APPLY_SKILL_DAMAGE_BONUS = 71,
	APPLY_NORMAL_HIT_DAMAGE_BONUS = 72,
	APPLY_SKILL_DEFEND_BONUS = 73,
	APPLY_NORMAL_HIT_DEFEND_BONUS = 74,
	APPLY_EXTRACT_HP_PCT = 75,
	APPLY_RESIST_WARRIOR = 76,
	APPLY_RESIST_ASSASSIN = 77,
	APPLY_RESIST_SURA = 78,
	APPLY_RESIST_SHAMAN = 79,
	APPLY_ENERGY = 80,
	APPLY_DEF_GRADE = 81,
	APPLY_COSTUME_ATTR_BONUS = 82,
	APPLY_MAGIC_ATTBONUS_PER = 83,
	APPLY_MELEE_MAGIC_ATTBONUS_PER = 84,
	APPLY_RESIST_ICE = 85,
	APPLY_RESIST_EARTH = 86,
	APPLY_RESIST_DARK = 87,
	APPLY_ANTI_CRITICAL_PCT = 88,
	APPLY_ANTI_PENETRATE_PCT = 89,
	MAX_APPLY_NUM = 90,
};

enum EOnClickEvents
{
	ON_CLICK_NONE = 0,
	ON_CLICK_SHOP = 1,
	ON_CLICK_TALK = 2,
	ON_CLICK_MAX_NUM = 3,
};

enum EOnIdleEvents
{
	ON_IDLE_NONE = 0,
	ON_IDLE_GENERAL = 1,
	ON_IDLE_MAX_NUM = 2,
};

enum EWindows
{
	RESERVED_WINDOW = 0,
	INVENTORY = 1,
	EQUIPMENT = 2,
	SAFEBOX = 3,
	MALL = 4,
	DRAGON_SOUL_INVENTORY = 5,
	BELT_INVENTORY = 6,
	GROUND= 7,
};

enum EMobSizes
{
	MOBSIZE_RESERVED = 0,
	MOBSIZE_SMALL = 1,
	MOBSIZE_MEDIUM = 2,
	MOBSIZE_BIG = 3,
};

enum EAIFlags
{
	AIFLAG_AGGRESSIVE = (1 << 0),
	AIFLAG_NOMOVE = (1 << 1),
	AIFLAG_COWARD = (1 << 2),
	AIFLAG_NOATTACKSHINSU = (1 << 3),
	AIFLAG_NOATTACKJINNO = (1 << 4),
	AIFLAG_NOATTACKCHUNJO = (1 << 5),
	AIFLAG_ATTACKMOB = (1 << 6 ),
	AIFLAG_BERSERK = (1 << 7),
	AIFLAG_STONESKIN = (1 << 8),
	AIFLAG_GODSPEED	= (1 << 9),
	AIFLAG_DEATHBLOW = (1 << 10),
	AIFLAG_REVIVE = (1 << 11),
};

enum EMobStatType
{
	MOB_STATTYPE_POWER = 0,
	MOB_STATTYPE_TANKER = 1,
	MOB_STATTYPE_SUPER_POWER = 2,
	MOB_STATTYPE_SUPER_TANKER = 3,
	MOB_STATTYPE_RANGE = 4,
	MOB_STATTYPE_MAGIC = 5,
};

enum EImmuneFlags
{
	IMMUNE_STUN = (1 << 0),
	IMMUNE_SLOW = (1 << 1),
	IMMUNE_FALL = (1 << 2),
	IMMUNE_CURSE = (1 << 3),
	IMMUNE_POISON = (1 << 4),
	IMMUNE_TERROR = (1 << 5),
	IMMUNE_REFLECT = (1 << 6),
};

enum EMobEnchants
{
	MOB_ENCHANT_CURSE = 0,
	MOB_ENCHANT_SLOW = 1,
	MOB_ENCHANT_POISON = 2,
	MOB_ENCHANT_STUN = 3,
	MOB_ENCHANT_CRITICAL = 4,
	MOB_ENCHANT_PENETRATE = 5,
	MOB_ENCHANTS_MAX_NUM = 6,
};

enum EMobResists
{
	MOB_RESIST_SWORD = 0,
	MOB_RESIST_TWOHAND = 1,
	MOB_RESIST_DAGGER = 2,
	MOB_RESIST_BELL = 3,
	MOB_RESIST_FAN = 4,
	MOB_RESIST_BOW = 5,
	MOB_RESIST_FIRE = 6,
	MOB_RESIST_ELECT = 7,
	MOB_RESIST_MAGIC = 8,
	MOB_RESIST_WIND = 9,
	MOB_RESIST_POISON = 10,
	MOB_RESISTS_MAX_NUM = 11,
};

enum SkillAttrType
{
	SKILL_ATTR_TYPE_NORMAL = 1,
	SKILL_ATTR_TYPE_MELEE = 2,
	SKILL_ATTR_TYPE_RANGE = 3,
	SKILL_ATTR_TYPE_MAGIC = 4,
};

enum SkillType
{
	SKILL_NORMAL = 0,
	SKILL_MASTER = 1,
	SKILL_GRAND_MASTER = 2,
	SKILL_PERFECT_MASTER = 3,
};

enum EGuildWarType
{
	GUILD_WAR_TYPE_FIELD = 0,
	GUILD_WAR_TYPE_BATTLE = 1,
	GUILD_WAR_TYPE_FLAG = 2,
	GUILD_WAR_TYPE_MAX_NUM = 3,
};

enum EGuildWarState
{
	GUILD_WAR_NONE = 0,
	GUILD_WAR_SEND_DECLARE = 1,
	GUILD_WAR_REFUSE = 2,
	GUILD_WAR_RECV_DECLARE = 3,
	GUILD_WAR_WAIT_START = 4,
	GUILD_WAR_CANCEL = 5,
	GUILD_WAR_ON_WAR = 6,
	GUILD_WAR_END = 7,
	GUILD_WAR_OVER = 8,
	GUILD_WAR_RESERVE = 9,
	GUILD_WAR_DURATION = 30*60,
	GUILD_WAR_WIN_POINT = 1000,
	GUILD_WAR_LADDER_HALF_PENALTY_TIME = 12*60*60,
};

enum EAttributeSet
{            
	ATTRIBUTE_SET_WEAPON = 0,
	ATTRIBUTE_SET_BODY = 1,
	ATTRIBUTE_SET_WRIST = 2,
	ATTRIBUTE_SET_FOOTS = 3,
	ATTRIBUTE_SET_NECK = 4,
	ATTRIBUTE_SET_HEAD = 5,
	ATTRIBUTE_SET_SHIELD = 6,
	ATTRIBUTE_SET_EAR = 7,
	ATTRIBUTE_SET_MAX_NUM = 8,
};  

enum EPrivType
{
	PRIV_NONE = 0,
	PRIV_ITEM_DROP = 1,
	PRIV_GOLD_DROP = 2,
	PRIV_GOLD10_DROP = 3,
	PRIV_EXP_PCT = 4,
	MAX_PRIV_NUM = 5,
};

enum EMoneyLogType
{
	MONEY_LOG_RESERVED = 0,
	MONEY_LOG_MONSTER = 1,
	MONEY_LOG_SHOP = 2,
	MONEY_LOG_REFINE = 3,
	MONEY_LOG_QUEST = 4,
	MONEY_LOG_GUILD = 5,
	MONEY_LOG_MISC = 6,
	MONEY_LOG_MONSTER_KILL = 7,
	MONEY_LOG_DROP = 8,
	MONEY_LOG_TYPE_MAX_NUM = 9,
};

enum EPremiumTypes
{
	PREMIUM_EXP = 0,
	PREMIUM_ITEM = 1,
	PREMIUM_SAFEBOX = 2,
	PREMIUM_AUTOLOOT = 3,
	PREMIUM_FISH_MIND = 4,
	PREMIUM_MARRIAGE_FAST = 5,
	PREMIUM_GOLD = 6,
	PREMIUM_MAX_NUM = 7,
};

enum SPECIAL_EFFECT
{
	SE_NONE = 0,
	SE_HPUP_RED = 1,
	SE_SPUP_BLUE = 2,
	SE_SPEEDUP_GREEN = 3,
	SE_DXUP_PURPLE = 4,
	SE_CRITICAL = 5,
	SE_PENETRATE = 6,
	SE_BLOCK = 7,
	SE_DODGE = 8,
	SE_CHINA_FIREWORK = 9,
	SE_SPIN_TOP = 10,
	SE_SUCCESS = 11,
	SE_FAIL = 12,
	SE_FR_SUCCESS = 13,
	SE_LEVELUP_ON_14_FOR_GERMANY = 14,
	SE_LEVELUP_UNDER_15_FOR_GERMANY = 15,
	SE_PERCENT_DAMAGE1 = 16,
	SE_PERCENT_DAMAGE2 = 17,
	SE_PERCENT_DAMAGE3 = 18,
	SE_AUTO_HPUP = 19,
	SE_AUTO_SPUP = 20,
	SE_EQUIP_RAMADAN_RING = 21,
	SE_EQUIP_HALLOWEEN_CANDY = 22,
	SE_EQUIP_HAPPINESS_RING = 23,
	SE_EQUIP_LOVE_PENDANT = 24,
	SE_EFFECT_CAPE_OF_COURAGE = 25,
};

enum EDragonSoulRefineWindowSize
{
	DRAGON_SOUL_REFINE_GRID_MAX = 15,
};

typedef enum
{
	SHOP_COIN_TYPE_GOLD = 0,
	SHOP_COIN_TYPE_SECONDARY_COIN = 1
} EShopCoinType;

#include "item_length.h"

enum EMisc2
{
	DRAGON_SOUL_EQUIP_SLOT_START = INVENTORY_MAX_NUM + WEAR_MAX_NUM,
	DRAGON_SOUL_EQUIP_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_START + (DS_SLOT_MAX * DRAGON_SOUL_DECK_MAX_NUM),
	DRAGON_SOUL_EQUIP_RESERVED_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_END + (DS_SLOT_MAX * DRAGON_SOUL_DECK_RESERVED_MAX_NUM),
	BELT_INVENTORY_SLOT_START = DRAGON_SOUL_EQUIP_RESERVED_SLOT_END,
	BELT_INVENTORY_SLOT_END = BELT_INVENTORY_SLOT_START + BELT_INVENTORY_SLOT_COUNT,
	INVENTORY_AND_EQUIP_SLOT_MAX = BELT_INVENTORY_SLOT_END,
};

#pragma pack(push, 1)
typedef struct SItemPos
{
	BYTE window_type;
	WORD cell;
	
	SItemPos ()
	{
		window_type = INVENTORY;
		cell = 0xFFFF;
	}

	SItemPos (BYTE _window_type, WORD _cell)
	{
		window_type = _window_type;
		cell = _cell;
	}

	bool IsValidItemPosition() const
	{
		switch (window_type)
		{
			case RESERVED_WINDOW:
			{
				return false;
			}
			
			case INVENTORY:
			case EQUIPMENT:
			case BELT_INVENTORY:
			{
				return cell < INVENTORY_AND_EQUIP_SLOT_MAX;
			}
			
			case DRAGON_SOUL_INVENTORY:
			{
				return cell < (DRAGON_SOUL_INVENTORY_MAX_NUM);
			}
			
			case SAFEBOX:
			case MALL:
			{
				return false;
			}

			default:
			{
				return false;
			}
		}
		return false;
	}

	bool operator == (const struct SItemPos& rhs) const
	{
		return (window_type == rhs.window_type) && (cell == rhs.cell);
	}

	bool operator < (const struct SItemPos& rhs) const
	{
		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));
	}

	bool IsSamePosition(const SItemPos& other) const 
	{
		return *this == other || ((INVENTORY == window_type || EQUIPMENT == window_type) && (INVENTORY == other.window_type || EQUIPMENT == other.window_type) && cell == other.cell);
	}

	bool IsEquipPosition() const
	{
		return ((INVENTORY == window_type || EQUIPMENT == window_type) && cell >= INVENTORY_MAX_NUM && cell < INVENTORY_MAX_NUM + WEAR_MAX_NUM) || IsDragonSoulEquipPosition();
	}

	bool IsDragonSoulEquipPosition() const
	{
		return (DRAGON_SOUL_EQUIP_SLOT_START <= cell) && (DRAGON_SOUL_EQUIP_SLOT_END > cell);
	}

	bool IsBeltInventoryPosition() const
	{
		return (BELT_INVENTORY_SLOT_START <= cell) && (BELT_INVENTORY_SLOT_END > cell);
	}

	bool IsDefaultInventoryPosition() const
	{
		return INVENTORY == window_type && cell < INVENTORY_MAX_NUM;
	}

} TItemPos;

const TItemPos NPOS(RESERVED_WINDOW, 0xFFFF);
#pragma pack(pop)